{"version":3,"sources":["images/GreenKartLogo_transparent.png","components/Navbar.js","components/ProductListing.js","Pages/HomePage.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","href","src","logo","style","width","id","role","data-toggle","aria-haspopup","aria-expanded","aria-labelledby","type","placeholder","aria-label","data-target","aria-controls","GET_USERS","gql","ProductListing","useQuery","loading","error","data","products","map","product","key","images","alt","title","variants","price","HomePage","Component","App","exact","path","component","Boolean","window","location","hostname","match","client","ApolloClient","uri","ReactDOM","hydrate","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","console","message"],"mappings":"0FAAAA,EAAOC,QAAU,IAA0B,uD,6QC2C5BC,MAvCf,WACI,OAAO,yBAAKC,UAAU,iDACtB,uBAAGA,UAAU,eAAeC,KAAK,KAAI,yBAAKC,IAAKC,IAAMC,MAAO,CAACC,MAAM,QACnE,yBAAKL,UAAU,2BAA2BM,GAAG,0BAC3C,wBAAIN,UAAU,sBACZ,wBAAIA,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIK,GAAG,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAA7I,OAGA,yBAAKV,UAAU,gBAAgBW,kBAAgB,oBAGjD,wBAAIX,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIK,GAAG,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAA7I,SAGA,yBAAKV,UAAU,gBAAgBW,kBAAgB,oBAGjD,wBAAIX,UAAU,qBACZ,uBAAGA,UAAU,2BAA2BC,KAAK,IAAIK,GAAG,iBAAiBC,KAAK,SAASC,cAAY,WAAWC,gBAAc,OAAOC,gBAAc,SAA7I,QAGA,yBAAKV,UAAU,gBAAgBW,kBAAgB,sBAKjD,0BAAMX,UAAU,4BACZ,2BAAOA,UAAU,uBAAuBY,KAAK,SAASC,YAAY,SAASC,aAAW,WACtF,4BAAQd,UAAU,uCAAuCY,KAAK,UAA9D,WAGN,4BAAQZ,UAAU,iBAAiBY,KAAK,SAASJ,cAAY,WAAWO,cAAY,0BAA0BC,gBAAc,yBAAyBN,gBAAc,QAAQI,aAAW,qBACtL,0BAAMd,UAAU,2B,8WCjCtB,IAAMiB,EAAYC,IAAH,KAiDAC,MA3Bf,WAA2B,IAAD,EACSC,mBAASH,GAAlCI,EADgB,EAChBA,QAASC,EADO,EACPA,MAAOC,EADA,EACAA,KACxB,OAAID,EAAc,qDACdD,EAAgB,0CAGb,yBAAKrB,UAAU,gCACnBuB,EAAKC,SAASC,KAAI,SAAAC,GAAO,OACxB,yBAAKC,IAAKD,EAAQpB,GAAIN,UAAU,2BAC9B,yBAAKA,UAAU,cACf,yBAAKE,IAAKwB,EAAQE,OAAO,GAAG1B,IAAKF,UAAU,eAAe6B,IAAI,QAC9D,yBAAK7B,UAAU,aACb,wBAAIA,UAAU,cAAc0B,EAAQI,OACpC,0BAAM9B,UAAU,uBAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,uBAChB,0BAAMA,UAAU,eAChB,0BAAMA,UAAU,eAChB,6BACA,wBAAIA,UAAU,IAAI0B,EAAQK,SAAS,GAAGC,MAAtC,aC3BKC,G,6KAZP,OACI,oCACA,yBAAKjC,UAAU,QACX,yBAAKA,UAAU,kBACX,kBAAC,EAAD,a,GAPGkC,cCiBRC,MAbf,WACE,OACE,yBAAKnC,UAAU,OACb,kBAAC,EAAD,MACA,kBAAC,IAAD,KACE,kBAAC,IAAD,KACI,kBAAC,IAAD,CAAOoC,OAAK,EAACC,KAAK,IAAIC,UAAWL,QCFzBM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,ICTAC,EAAS,I,MAAIC,GAAa,CAC9BC,IAAK,kCAIPC,IAASC,QACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,iBAAD,CAAgBL,OAAQA,GACtB,kBAAC,EAAD,QAGJM,SAASC,eAAe,SD+GpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAApC,GACLqC,QAAQrC,MAAMA,EAAMsC,c","file":"static/js/main.639ec323.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/GreenKartLogo_transparent.664aed2a.png\";","import React from 'react';\nimport logo from '../images/GreenKartLogo_transparent.png';\nimport './Navbar.css'\n\nfunction Navbar(){\n    return <nav className=\"navbar navbar-expand-lg navbar-light bg-light\">\n    <a className=\"navbar-brand\" href=\"/\"><img src={logo} style={{width:170}}/></a>\n    <div className=\"collapse navbar-collapse\" id=\"navbarSupportedContent\">\n      <ul className=\"navbar-nav mr-auto\">\n        <li className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Men\n          </a>\n          <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          </div>\n        </li>\n        <li className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Women\n          </a>\n          <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          </div>\n        </li>\n        <li className=\"nav-item dropdown\">\n          <a className=\"nav-link dropdown-toggle\" href=\"#\" id=\"navbarDropdown\" role=\"button\" data-toggle=\"dropdown\" aria-haspopup=\"true\" aria-expanded=\"false\">\n            Kids\n          </a>\n          <div className=\"dropdown-menu\" aria-labelledby=\"navbarDropdown\">\n          </div>\n        </li>\n      </ul>\n      </div>\n        <form className=\"form-inline my-2 my-lg-0\">\n            <input className=\"form-control mr-sm-2\" type=\"search\" placeholder=\"Search\" aria-label=\"Search\"/>\n            <button className=\"btn btn-outline-success my-2 my-sm-0\" type=\"submit\">Search</button>\n        </form>\n\n      <button className=\"navbar-toggler\" type=\"button\" data-toggle=\"collapse\" data-target=\"#navbarSupportedContent\" aria-controls=\"navbarSupportedContent\" aria-expanded=\"false\" aria-label=\"Toggle navigation\">\n      <span className=\"navbar-toggler-icon\"></span>\n    </button>\n  </nav>\n}\n\nexport default Navbar;","import React from 'react';\nimport { useQuery } from \"@apollo/react-hooks\"\nimport gql from \"graphql-tag\"\nimport './ProductListing.css';\n\nconst GET_USERS = gql`\n{\n  products{\n    id\n    title\n    description\n    tags\n    variants{\n      id\n      product_id\n      price\n      compare_at_price\n    }\n    images{\n      id\n      product_id\n      src\n    }\n  }\n}\n`\n\nfunction ProductListing() {\n  const { loading, error, data } = useQuery(GET_USERS)\n  if (error) return <h1>Something went wrong!</h1>\n  if (loading) return <h1>Loading...</h1>\n\n\n  return <div className=\"row row-cols-1 row-cols-md-4\">\n    {data.products.map(product => (\n      <div key={product.id} className=\"col mb-4 productlisting\">\n        <div className=\"card h-100\">\n        <img src={product.images[0].src} className=\"card-img-top\" alt=\"...\" />\n        <div className=\"card-body\">\n          <h5 className=\"card-title\">{product.title}</h5>\n          <span className=\"fa fa-star checked\"></span>\n          <span className=\"fa fa-star checked\"></span>\n          <span className=\"fa fa-star checked\"></span>\n          <span className=\"fa fa-star\"></span>\n          <span className=\"fa fa-star\"></span>\n          <br />\n          <h3 className=\"\">{product.variants[0].price}$</h3>\n        </div>\n        </div>\n      </div>            \n    ))}\n  </div>\n}\n\nexport default ProductListing;","import React, { Component } from 'react';\nimport ProductListing from '../components/ProductListing';\nimport './HomePage.css'\n\nclass HomePage extends Component{\n   \n    render(){\n        return(\n            <>\n            <div className=\"root\">\n                <div className=\"productListing\">\n                    <ProductListing/>\n                </div>\n            </div>\n            </>\n        );\n    }\n}\n\nexport default HomePage;","import React from 'react';\nimport './App.css';\nimport { BrowserRouter, Switch, Route } from 'react-router-dom';\nimport Navbar from './components/Navbar';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import 'bootstrap/dist/js/bootstrap.bundle';\nimport HomePage from './Pages/HomePage';\n\nfunction App() {\n  return (\n    <div className=\"App\">\n      <Navbar />\n      <BrowserRouter>\n        <Switch>\n            <Route exact path='/' component={HomePage} /> \n        </Switch>\n      </BrowserRouter>\n    </div>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nimport ApolloClient from 'apollo-boost'\nimport { ApolloProvider } from '@apollo/react-hooks';\n\nconst client = new ApolloClient({\n  uri: 'http://localhost:4000/graphql',\n  // cache: new InMemoryCache()\n})\n\nReactDOM.hydrate(\n  <React.StrictMode>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}